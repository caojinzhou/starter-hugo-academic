---
title: 实验2 参考代码
date: '2021-01-01'
type: book
weight: 20
active: false
draft: true
---

## 一、实验目的

>1.	掌握线性/非线性滤波的基本原理方法。
>2. 掌握傅里叶变换及逆变换的基本原理方法。
>2.	理解频域滤波的基本原理及方法。
>3.	掌握进行图像的频域滤波的方法。
>5. 以MATLAB为例，需要熟悉下列命令：熟悉imread()函数、imwrite()函数、size()函数、subplot()函数、figure()函数。

## 二、实验环境

> Matlab

## 三、实验内容

> 1、平滑空域滤波

1)	读出一幅灰度图像，给这幅图像分别加入椒盐噪声和高斯噪声后并与前一张图显示在同一图像窗口中。


```matlab

im = imread('lena.jpg');
% imnoise 是表示添加噪声污染一幅图像，叫做噪声污染图像函数
im_noise_salt = imnoise(im,'salt & pepper',0.1); % 加入椒盐噪声
im_noise_gaussian = imnoise(im,'gaussian'); % 加入高斯噪声

% 显示加入噪声后的图像
% figure,imshow(im_noise_salt);title('加入椒盐噪声后的图像');
% figure,imshow(im_noise_gaussian);title('加入高斯噪声后的图像');
figure;
subplot(131),imshow(im);title('原图');
subplot(132),imshow(im_noise_salt);title('加入椒盐噪声后的图像');
subplot(133),imshow(im_noise_gaussian);title('加入高斯噪声后的图像');
```

2)	对加入噪声图像选用不同的平滑（低通）模板做运算，对比不同模板所形成的效果，要求在同一窗口中显示。

平滑滤波（低通滤波）：过滤掉图像中的高频部分（灰度变化较大较快部分）使得图像直方图分布均匀.
线性平滑滤波：均值滤波、高斯滤波；
非线性平滑滤波：中值滤波；

```matlab
I=imread('xxx.tif');
H = fspecial('sobel');
Sobel = imfilter(I,H,'replicate');
H = fspecial('laplacian',0.4);
lap = imfilter(I,H,'replicate');
H = fspecial('gaussian',[3 3],0.5);
gaussian = imfilter(I,H,'replicate');
subplot(221),imshow(I);
subplot(222),imshow(Sobel);
subplot(223),imshow(lap);
subplot(224),imshow(gaussian);
```
3)使用函数imfilter，分别采用不同的填充方法（或边界选项，如零填充、’replicate’、’symmetric’、’circular’）进行低通滤波，显示处理后的图像。

```matlab

im = imread('peppers.png');
h = fspecial('motion', 50, 45);  %motion blurred
im_a0 = imfilter(im, h);
im_a1 = imfilter(im, h, 'replicate');
im_a2 = imfilter(im, h, 'x');
im_a3 = imfilter(im, h, 0);
im_a4 = imfilter(im, h, 'symmetric');
im_a5 = imfilter(im, h, 'circular');

```

4)运用for循环，将加有椒盐噪声的图像进行10次、20次均值滤波，查看其特点，显示均值处理后的图像（提示:利用fspecial函数的’average’类型生成均值滤波器）。

```matlab
%% 图像的滤波次数
times = 10; 
A = fspecial('average',3); % 生成系统自带3×3滤波器

for i = 1:times
%% 将图像进行均值滤波
   im_filtered1 = filter2(A,im_noise_salt);

times = 20; 
for i = 1:times
%% 将图像进行均值滤波
   im_filtered2 = filter2(A,im_noise_salt);

%% 显示结果
figure; 
subplot(132); imshow(im_filtered1); title('10次均值滤波'); axis on
subplot(133); imshow(im_filtered2); title('20次均值滤波'); axis on

```

5)	对加入椒盐噪声的图像分别采用均值滤波法和中值滤波法做处理，要求在同一窗口中显示结果。
```matlab
% 使用均值滤波分别对高斯噪声、椒盐噪声的图像进行滤波
% fspecial函数 用来生成滤波器（也叫算子）的函数
% h = fspecial(type)  h = fspecial(type，para) 
% 使用type参数来指定滤波器的种类，使用para来对具体的滤波器种类添加额外的参数信息。h就是生成的滤波器。

n=1; m=2*n+1;
A = fspecial('average',m); % 均值滤波器

% filter2 - 二维数字滤波器 
% Y = filter2(H,X)  根据矩阵 H 中的系数，对数据矩阵 X 应用有限脉冲响应滤波器。
% 进行滤波并显示图像
im_filtered1 = filter2(A,im_noise_salt);


% 使用中值滤波分别对高斯噪声、椒盐噪声的图像进行滤波
% 定义邻域尺寸
n1 = 2; m1 = 2*n1+1;
n2 = 2; m2 = 2*n2+1;

% medfilt2函数用于执行二维中值滤波，使用方法如下：
% B = medfilt2(A, [m n]) B = medfilt2(A)
% 其中[m n]表示邻域块的大小，默认值为[3 3]。 b=medfilt2(a,[m,n]);
% b是中值滤波后的图象矩阵，a是原图矩阵，m和n是处理模版大小，默认3×3。
im_filtered2 = medfilt2(im_noise_salt,[m1,m2]);


figure;
subplot(321),imshow(im_noise_salt);title('加入椒盐噪声后的图像');
subplot(323),imshow(uint8(im_filtered1));title('椒盐噪声图像进行均值滤波后的图像');
subplot(324),imshow(uint8(im_filtered2));title('椒盐噪声图像进行中值滤波后的图像');

```

6)	自己设计平滑空间滤波器，并将其对噪声图像进行处理，显示处理后的图像。
```matlab

design=[0 0 8 0 0;
         0 0 8 0 0;
         8 8 8 8 8;
         0 0 8 0 0;
         0 0 8 0 0];
K1= ordfilt2(im_noise_salt,5,design);

```





> 2、锐化空域滤波

1） 读出一幅灰度图像，采用3*3 的拉普拉斯算子W=[1,1,1;-1,8,1;1,1,1]对其进行滤波。
```matlab

I=imread('xxx.tif');
T=double(I);
subplot(1,2,1),imshow(T,[]);title('Original Image');
w =[1,1,1;
1,-8,1;
1,1,1];
K=conv2(T,w,'same');
```


2)	编写函数w = genlaplacian(n)，自动产生任一奇数尺寸$n$的拉普拉斯算子，如5 $*$ 5的拉普拉斯算子。

```matlab
function w = genlaplacian(n)
%Computes the Laplacian operator
w = ones(n);
x = ceil(n/2);
w(x, x) = -1 * (n * n - 1);

```


3)	分别采用5*5、9*9、 15*15和 25*25大小的拉普拉斯算子对图像进行锐化滤波，并利用式 完成图像的锐化增强，观察其有何不同，要求在同一窗口中显示。

锐化滤波（高通滤波）：过滤掉图像中的低频部分，让图像灰度变化大的地方更加的突出，如图像边界、交界地方；
线性/非线性锐化滤波：线性滤波常用算子：loplacian算子；  
非线性锐化滤波常用算子：sobel算子、prewitt算子、log算子；


```matlab
w1 = genlaplacian(5);
I=imread('xxx.tif');
T=double(I);
K=conv2(T,w1,'same');
J=T-K;


```

4)	采用不同的梯度算子对图像进行锐化滤波，并比较其效果。
```matlab
[I,map]=imread('xxx.tif');
I=double(I);
[Gx,Gy]=gradient(I);       % gradient calculation
G=sqrt(Gx.*Gx+Gy.*Gy);     % matrix 

J1=G;                          % gradient1
imshow(J1,map);         
J2=I;                         % gradient2
K=find(G>=7);
J2(K)=G(K);
imshow(J2,map); 
J3=I;                          % gradient3
K=find(G>=7);
J3(K)=255;
imshow(J3,map); 
J4=I;                          % gradient4
K=find(G<=7);
J4(K)=255;
imshow(J4,map); 
J5=I;                           % gradient5
K=find(G<=7);
J5(K)=0;
Q=find(G>=7);
J5(Q)=255;
imshow(J5,map);


```




> 3、傅里叶变换

1)	读出一幅灰度图像，对其进行快速傅里叶变换，分别显示其幅度图像和相位图像。

```matlab
clear
clc
img=imread('xx.png');
subplot(2,2,1);imshow(img);title('原图');
f=rgb2gray(img);    %对于RGB图像必须做的一步，也可以用im2double函数
F=fft2(f);          %傅里叶变换
F1=log(abs(F)+1);   %取模并进行缩放
subplot(2,2,2);imshow(F1,[]);title('傅里叶变换频谱图');

Fs=fftshift(F);      %将频谱图中零频率成分移动至频谱图中心
S=log(abs(Fs)+1);    %取模并进行缩放
subplot(2,2,3);imshow(S,[]);title('频移后的频谱图');
```


2)	仅对相位部分进行傅里叶逆变换后查看结果图像。

```matlab
phase=log(angle(F)*180/pi);     %图像相位谱
subplot(2,2,4),imshow(phase,[]),title('图像相位谱');
```

3)	仅对幅度部分进行傅里叶逆变换后查看结果图像。
```matlab
margin=log(abs(F));      %图像幅度谱，加log便于显示
subplot(2,2,3),imshow(margin,[]),title('图像幅度谱');
```

4)	将图像的傅里叶变换$F$置为其共轭后进行逆变换，比较新生成图像与原始图像的差异。

```matlab
fr=real(ifft2(ifftshift(Fs)));  %频率域反变换到空间域，并取实部
ret=im2uint8(mat2gray(fr));    %更改图像类型
subplot(2,2,4);imshow(ret),title('逆傅里叶变换');
```


> 4、平滑频域滤波
1)	设计理想低通滤波器、巴特沃斯低通滤波器和高斯低通滤波器，截止频率自选。
理想低通滤波器
```matlab
I=imread('x.tif');
f=double(I);     % chage into double as MATLAB doesn’t suppor calculation
  % of image in unsigned int type
g=fft2(f);       % fourier transform
g=fftshift(g);  % zero-frequency area centralized
[M,N]=size(g);
d0=100;            %cutoff frequency
m=fix(M/2); n=fix(N/2);
for i=1:M
       for j=1:N
           d=sqrt((i-m)^2+(j-n)^2);
           if(d<=d0)
           h=1;
           else h=0;
                  end
           result(i,j)=h*g(i,j);
    end
end
result=ifftshift(result);
J1=ifft2(result);
J2=uint8(real(J1));
imshow(J2) 

```

巴特沃斯低通滤波器（二阶）
```matlab
I=imread('xx.tif');
f=double(I);    
g=fft2(f);       
g=fftshift(g);  
[M,N]=size(g);
nn=2;             % 2-grade Butterworth lowpss filter
d0=100;
m=fix(M/2); n=fix(N/2);
for i=1:M
       for j=1:N
           d=sqrt((i-m)^2+(j-n)^2);
           h=1/(1+0.414*(d/d0)^(2*nn)); % filter transform function
           %h=1./(1+(d./d0).^(2*n))
%h=exp(-(d.^2)./(2*(d0^2)));
           result(i,j)=h*g(i,j);
       end
end
result=ifftshift(result);
J1=ifft2(result);
J2=uint8(real(J1));
imshow(J2); 
```


高斯低通滤波
```matlab
I=imread('xx.tif');
f=double(I);    
g=fft2(f);       
g=fftshift(g);  
[M,N]=size(g);
d0=100;
m=fix(M/2); n=fix(N/2);
for i=1:M
       for j=1:N
           d=sqrt((i-m)^2+(j-n)^2);
h=exp(-(d.^2)./(2*(d0^2)));   % gaussian filter transform
           result(i,j)=h*g(i,j);
       end
end
result=ifftshift(result);
J1=ifft2(result);
J2=uint8(real(J1));
```

2)读出 cameraman.tif这幅图像，加入椒盐躁声，分别采用理想低通滤波器、巴特沃斯低通滤波器和指数型低通滤波器对其进行滤波（截止频率自选），再做反变换得到低通滤波后的空域图像。观察不同的截止频率下采用不同低通滤波器得到的图像与原图像的区别，特别注意振铃效应。
```matlab

```

>  5、锐化频域滤波
1)	设计理想高通滤波器、巴特沃斯高通滤波器和高斯高通滤波器，截止频率自选。
```matlab


```


2)	读出 cameraman.tif 这幅图像，分别采用理想高通滤波器、巴特沃斯高通滤波器和指数型高通滤波器对其进行滤波（截止频率分别为 15,20,80），再做反变换得到高通滤波后的空域图像。观察不同的截止频率下采用不同高通滤波 器得到的图像与原图像的区别。
```matlab


```

% 对数变换函数
function Output=logg(I)
    I0=double(I);
    I0=255./log(256).*log(1+I0);
    Output=uint8(I0);
end
