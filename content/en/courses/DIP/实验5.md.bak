---
title: 实验5 参考代码
date: '2022-05-12'
type: book
weight: 60
active: true
draft: true
---

## 一、实验目的

>1.	了解图像分割中的基本概念以及相关知识；
>2.	掌握几种经典边缘检测算子的基本原理、实现步骤；
>3.	理解阈值分割、区域分割等基本原理、实现步骤；
>4.	理解区域生长法的基本原理、实现方法。



## 二、实验环境

> Matlab

## 三、实验内容

> 1.	分别用Roberts、Prewitt、Sobel（BW1 = edge(I,'sobel')）和LOG算子对coins.png等多幅灰度图像进行边缘检测，比较这几种算子的处理结果，并总结它们各自的优劣。

```matlab
close all
clear all
I=imread('C:\Users\starlab\Desktop\Fig1006(a).tif');
bw1=edge(I,'sobel');
bw3=edge(I,'prewitt');
bw4=edge(I,'roberts');
bw5=edge(I,'log',[],4);
subplot(2,3,1);imshow(I);xlabel('原图');
subplot(2,3,2);imshow(bw1);xlabel('Sobel算子'); 
subplot(2,3,4);imshow(bw3);xlabel('Prewitt算子'); 
subplot(2,3,5);imshow(bw4);xlabel('Robrtts算子'); 
subplot(2,3,6);imshow(bw5);xlabel('LoG算子'); 

```


> 2.	使用Hough变换对circuit.tif图像进行直线检测，并显示最长的10条直线。

```matlab

i=imread('C:\Users\starlab\Desktop\circuit.tif');
i1=imrotate(i,30,'crop');    %用crop方式显示，旋转后的图像跟原图像大小一样，多余的地方舍去
bw=edge(i1,'canny');
subplot(2,3,1);imshow(i);xlabel('原始图像');
subplot(2,3,2);imshow(i1);xlabel('旋转后的图像');
subplot(2,3,3);imshow(bw);xlabel('边缘检测图像');

%bw：m*n维二值图
%H：hough变换后的累加器矩阵，行数为m，列数为n
%theta：θ
%rho：ρ

[H,theta,rho] = hough(bw);%利用hough函数进行hough变换

subplot(2,3,4);hold on;imshow(imadjust(mat2gray(H)),[],'XData',theta,'YData',rho,'Initialmagnification','fit');

title('峰值检测');
xlabel('\theta(degrees)');ylabel('\rho');
axis on,axis normal,hold on
P=houghpeaks(H,10,'threshold',ceil(0.3*max(H(:))));
x=theta(P(:,2));
y=rho(P(:,1));
plot(x,y,'s','color','red');
lines=houghlines(bw,theta,rho,P,'FillGap',5,'MinLength',7);
subplot(2,3,5),imshow(i1);title('检测到的线段');hold on;
max_len=0;
for k=1:length(lines)
    xy=[lines(k).point1;lines(k).point2];
    plot(xy(:,1),xy(:,2),'LineWidth',2,'color','green');
    %绘制线段起终点
    plot(xy(1,1),xy(1,2),'LineWidth',2,'color','yellow');
    plot(xy(2,1),xy(2,2),'LineWidth',2,'color','blue');
    %确定最长线段的端点
    len=norm(lines(k).point1-lines(k).point2);
    if(len>max_len)
        max_len=len;
        xy_long=xy;
    end
end
%突出显示最长一条直线
plot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'color','red');

```
> 3.	对coins.png图像使用双峰阈值法行图像分割。实现方法：读取图像，显示其灰度直方图，观察直方图，选择两个波峰之间的波谷对应的灰度值作为最优阈值，通过im2bw()函数进行图像分割。

```matlab


```

> 4.	对Fig1014(a).tif灰度图像采用Otsu算法（graythresh函数获取图像分割的最优阈值）和基本全局阈值法（迭代阈值法）进行图像分割，显示分割结果，并分析这两种方法各自的优劣。

```matlab
clc
close all
clear all
I=imread('C:\Users\starlab\Desktop\Fig1014(a).tif');
I=im2double(I);
[width.heoght]=size(I)
T1=graythresh(I);
BW1=im2bw(I,T1);
f=double(I);
T=(min(f(:))+max(f(:)))/2;
done=false;
i=0;
while~done
    r1=find(f<=T);
    r2=find(f>T);
    Tnew=(mean(f(r1))+mean(f(r2)))/2
    done=abs(Tnew-T)<1
    T=Tnew;
    i=i+1;
end
f(r1)=0;
f(r2)=1;
subplot(1,3,1);imshow(I);xlabel('原图');
subplot(1,3,2);imshow(f);xlabel('迭代式阈值选择法');
subplot(1,3,3);imshow(BW1);xlabel('Otsu算法');
```



> 5. 实现基于局部统计的可变阈值处理算法，并对图像Fig1017(a).tif进行阈值分割。
```matlab


I1=imread('cell.tif');
I1=tofloat(I1);%改变图像类型

figure(2)
subplot(221),imshow(I1),title('原图');

g=localthresh(I1,ones(3),30,1.5,'global');%利用局部标准差的方法对图像进行分割
SIG=stdfilt(I1,ones(3));

subplot(223),imshow(SIG,[ ]),title('局部标准差图像');
subplot(224),imshow(g),title('局部阈值分割处理图像');

function g=localthresh(f,nhood,a,b,meantype)
f=tofloat(f);
SIG=stdfilt(f,nhood);
if nargin==5 && strcmp(meantype,'global')
    MEAN=mean2(f);
else
    MEAN=localmean(f,nhood);
end
g=(f>a*SIG) & (f>b*MEAN);
end


function mean=localmean(f,nhood)
%   函数localmean计算局部平均值
if nargin==1
    nhood=ones(3)/9;
else
    nhood=nhood/sum(nhood(:));
end
mean=imfilter(tofloat(f),nhood,'replicate');
end



```

> 6. 实现区域生长法算法，代码需写注释，并对一幅灰度图像进行图像分割处理。
```matlab

function [g,NR,SI,TI] = regiongrow(f,S,T)
%   函数regingrow实现基本的区域生长分割
%   f是输入待分割的图像
%   S是单一种子值
%   T是包含了阈值的数组，也可以是全局阈值
%   S和T中所有的值必须在[0,1]之间
%   
%   g是分割后的图像
%   NR是所找到的区域的数量
%   SI是包含种子点的一副图像
%   TI是包含处理连接性之前就已通过阈值测试的像素的一副图像

f = tofloat(f);
%   如果S是标量，包含种子图像
if numel(S) == 1
    SI = f == S;
    S1 = S;
else
    %   S是数组
    SI = bwmorph(S,'shrink',Inf);
    S1 = f(SI);
end

TI = false(size(f));
for K = 1 : length(S1)
    seedvalue = S1(K);
    S = abs(f - seedvalue) < T;
    TI = TI | S;
end

[g,NR] = bwlabel(imreconstruct(SI,TI));

f = imread(‘xxx.tif'); 
subplot(2,2,1),imshow(f);
title('(a)显示有焊接缺陷的图像');
%函数regiongrow返回的NR为是不同区域的数目，参数SI是
一副含有种子点的图像
%TI是包含在经过连通前通过阈值测试的像素
[g,NR,SI,TI]=regiongrow(f,1,0.26);%种子的像素值为255，65
为阈值
subplot(2,2,2),imshow(SI);
title('(b)种子点');
subplot(2,2,3),imshow(TI);
title('(c)通过了阈值测试的像素的二值图像(白色)');
subplot(2,2,4),imshow(g);
title('(d)对种子点进行8连通分析后的结果');
```