---
title: 实验4 参考代码
date: '2022-05-01'
type: book
weight: 60
active: true
draft: true
---

## 一、实验目的

> 1.	了解图像降质/复原处理的模型。
> 2.	了解估计降质函数的基本原理。
> 3.	掌握降质图像中常见噪声模型及参数估计方法、基本原理、实现步骤。
> 4.	加深对几种常用的图像复原方法的理解。


## 二、实验环境

> Matlab

## 三、实验内容

> 1.	读入选择图像库中一幅灰度图像，对图像用“motion”及“disk”类型进行模糊降质，显示模糊前后的图像。

```matlab

I=imread('xx.tif');
subplot(2,2,1);
imshow(I);title('Original Image');
H1=fspecial('motion',20,45);
MotionBlur=imfilter(I,H1,'replicate');
subplot(2,2,2);
imshow(MotionBlur);title('Motion Blur');

H2=fspecial('disk',10);
disk=imfilter(I,H2,'replicate');
subplot(2,2,3);
imshow(disk);title('Disk');
```


> 2.	生成大小为120*120的棋盘格式图像（自行查阅checkerboard函数的使用方法），对该图像进行模糊加噪，分别用点扩散函数、NSR、NCORR和ICORR为参数对降质图像进行恢复，显示并对比恢复结果。

```matlab
f = checkerboard(8);                  %调用棋盘板图像

%%将图像的数据格式转换为double型
f=im2double(f);                       %将灰度图像由uint8转为double

%%建立退化模型
PSF = fspecial('motion',27,55);          %对图像进行27个像素点，55度角的模糊建模                     
gb = imfilter(f,PSF,'circular');         %将图像与退化模型叠加 

%%添加噪声
noise = imnoise(zeros(size(f)),'gaussian',0,0.0001);%高斯噪声。均值为0，方差0.002  
g = gb + noise;                         %添加噪声的退化图像

%%当K=0时，相当于直接逆滤波
fr1 = deconvwnr(g,PSF);   %%逆滤波 {维纳滤波（退化图像，点扩散函数（退化模型），噪信比为0）}


%%K = sum(noise(:).^2)/sum(f(:).^2);       %计算常数比率K                 
%也可以使用图像与噪声的方差比值来估计


Sn = abs(fft2(noise)).^2;                %噪声功率谱                   
nA = sum(Sn(:))/numel(noise);            %噪声平均功率                   
Sf = abs(fft2(f)).^2;                    %图像功率谱                   
fA = sum(Sf(:))/numel(f);                %图像平均功率   

%%通过功率谱比率进行维纳滤波
K = nA/fA;                               % 噪信功率比 %噪信比=|N(u,v)|^2/|F(u,v)|^2
fr2 = deconvwnr(g,PSF,K);                %使用常数比率的维纳滤波复原

%%通过将自相关函数比值进行维纳滤波
NCORR = fftshift(real(ifft2(Sn)));       %噪声自相关函数
ICORR = fftshift(real(ifft2(Sf)));       %原图像自相关函数
%用于替代功率谱。计算功率谱的傅里叶逆变换，得到自相关函数。
fr3 = deconvwnr(g,PSF,NCORR,ICORR);      %使用自相关函数的维纳滤波复原

%这里功率谱就是自相关函数，第一种是直接用信噪比NSR第二种是用噪声自相关和信号自相关。

%%形成一个3×3得窗口
subplot(2,3,1);imshow(f);title('原图像');
subplot(2,3,2);imshow(gb);title('运动模糊图像');
subplot(2,3,3);imshow(noise,[ ]);title('高斯噪声图像');
subplot(2, 4, 4), imshow(g);title('运动模糊+噪声图像');

subplot(2,3,4);imshow(fr1);title('逆滤波结果(有噪声)');
subplot(2,3,5);imshow(fr2);title('计算噪信比K值滤波结果');
subplot(2,3,6);imshow(fr3);title('使用自相关函数的维纳滤波结果');

```


>  3.	对内容1中降质图像采用维纳滤波（deconvwnr）的方法复原，显示复原后的图像。

```matlab
WI1=deconvwnr(MotionBlur,H1);           %不带参数的维纳滤波（逆滤波）复原
subplot(1,3,1); imshow(WI1,[]);      %显示逆滤波复原结果
title('逆滤波复原结果'); 

WI2=deconvwnr(disk,H2);           %不带参数的维纳滤波（逆滤波）复原
subplot(1,3,2); imshow(WI2,[]);      %显示逆滤波复原结果
title('逆滤波复原结果'); 

```


> 4.	编写自适应中值滤波adpmedfilt(g, Smax)，分析自适应中值滤波的优点。

```matlab


function f = adpmedian(g,Smax)
if (Smax<=1)||(Smax/2==round(Smax/2))||(Smax~=round(Smax))
    error('Smax must be an odd integer >1.')
end
f=g;
f(:)=0;
alreadyProcessed=false(size(g));
 
for k=3:2:Smax
    zmin=ordfilt2(g,1,ones(k,k),'symmetric');
    zmax=ordfilt2(g,k*k,ones(k,k),'symmetric');
    zmed=medfilt2(g,[k k],'symmetric');
    
    processUsingLevelB=(zmed>zmin)&(zmax>zmed)&...
        ~alreadyProcessed;
    zB=(g>zmin)&(zmax>g);
    outputZxy=processUsingLevelB & zB;
    outputZmed=processUsingLevelB&~zB;
    f(outputZxy)=g(outputZxy);
    f(outputZmed)=zmed(outputZmed);
    
    alreadyProcessed=alreadyProcessed | processUsingLevelB;
    if all(alreadyProcessed(:))
        break;
    end
end
f(~alreadyProcessed)=zmed(~alreadyProcessed);
 
end


```
> 5. 从图像库中读取三幅灰度图像，对每幅依次添加椒盐噪声、高斯噪声、均匀分布噪声，观察图像的变化。然后依次用均值滤波，中值滤波、自适应中值滤波和基于局部区域统计特征的自适应滤波方法（wiener2）对噪声图像进行，并比较处理后的结果。通过比较总结出自适应滤波的优势和适用的滤波场合。
```matlab




```